{"version":3,"file":"static/js/201.806ea779.chunk.js","mappings":"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","sources":["components/ProgressRing.js","utils/strings.js","components/WeeklyProgress.js","utils/urls.js"],"sourcesContent":["// Borrowed from https://css-tricks.com/building-progress-ring-quickly/\nimport PropTypes from \"prop-types\";\n\nProgressRing.propTypes = {\n  radius: PropTypes.number,\n  stroke: PropTypes.number,\n  progress: PropTypes.number,\n  title: PropTypes.string,\n  progressText: PropTypes.string\n};\n\nexport default function ProgressRing ({radius, stroke, progress, title, progressText=null}) {\n  const adjustedProgress = progress > 100 ? 100 : progress;\n  const normalizedRadius = radius - stroke * 2;\n  const circumference = normalizedRadius * 2 * Math.PI;\n  const strokeDashoffset = circumference - adjustedProgress / 100 * circumference;\n  const titleOffsetPixels = 32;\n  const showFullCircle = adjustedProgress === 100;\n\n  return (\n    <div\n      className=\"progress-ring-container\"\n      style={{maxWidth: radius * 2, maxHeight: (radius * 2) + titleOffsetPixels}}\n    >\n      <h4 className=\"progress-title\">{title}</h4>\n      <div className=\"progress-ring\" data-testid=\"progress-ring\">\n        <svg\n          height={radius * 2}\n          width={radius * 2}\n        >\n          <circle\n            data-full={showFullCircle}\n            stroke={showFullCircle ? \"#5dcc06\" : \"#235390\"}\n            fill=\"transparent\"\n            strokeWidth={stroke}\n            strokeDasharray={circumference + \" \" + circumference}\n            style={{strokeDashoffset}}\n            r={normalizedRadius}\n            cx={radius}\n            cy={radius}\n          />\n        </svg>\n      </div>\n      <span className=\"progress-text\" data-testid=\"progress-text\">\n        {progressText ? progressText : `${progress}%`}\n      </span>\n    </div>\n  );\n}\n","export const titleCase = (string) => {\n  let splitStringArray = string.toLowerCase().split(\" \");\n  for (let i = 0; i < splitStringArray.length; i++) {\n    splitStringArray[i] = splitStringArray[i].charAt(0).toUpperCase() + splitStringArray[i].slice(1);\n  }\n  return splitStringArray.join(\" \");\n};\n","import { useState, useMemo, useEffect, useContext } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport ProgressRing from \"./ProgressRing\";\nimport { titleCase } from \"../utils/strings\";\nimport { getSearchParams } from \"../utils/urls\";\nimport { AggregatedImmersionContext } from \"../providers/AggregatedImmersionProvider\";\nimport useParsedCsv from \"../hooks/use-parsed-csv\";\n\nconst TIME_RANGES = [\n  {name: \"This week\", key: \"this-week\"},\n  {name: \"Last week\", key: \"last-week\"},\n  {name: \"Two weeks\", key: \"two-weeks\"},\n];\n\nexport default function WeeklyProgress () {\n  const { aggregatedImmersionData: data, aggregatedImmersionIsLoading: isLoading } = useContext(AggregatedImmersionContext);\n  const [windowDimensions, setWindowDimensions] = useState({\n    height: window.innerHeight,\n    width: window.innerWidth\n  });\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const selectedTimeRangeKey = useMemo(() => {\n    const urlTimeRange = getSearchParams().get(\"timeRange\")?.trim();\n    if (urlTimeRange && TIME_RANGES.map(t => t.key).includes(urlTimeRange)) return urlTimeRange;\n    return TIME_RANGES[0].key;\n  }, [searchParams]);\n\n  const parsedCsvData = useParsedCsv(isLoading, data);\n\n  const progressByTimeRangeKey = useMemo(() => {\n    const result = {};\n    TIME_RANGES.forEach((timeRange) => {\n      result[timeRange.key] = parsedCsvData.slice(0, 3).map((progressReport) => {\n        const progressNumber = (parseInt(progressReport[`${titleCase(timeRange.name)} (mins)`]) / parseInt(progressReport[\"Weekly Goals (mins)\"])) * 100;\n        return {\n          progress: progressNumber,\n          title: progressReport[\"Category\"],\n          progressText: progressReport[titleCase(timeRange.name)],\n        };\n      });\n    });\n    return result;\n  }, [parsedCsvData]);\n\n  useEffect(() => {\n    const handleResize = () => {\n      setWindowDimensions({\n        height: window.innerHeight,\n        width: window.innerWidth\n      });\n    };\n    window.addEventListener(\"resize\", handleResize);\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  if (isLoading) {\n    return <p className=\"loading-messsage\">Fetching csv file...</p>;\n  }\n\n  if (Object.keys(progressByTimeRangeKey).length === 0) {\n    return <p className=\"loading-messsage\">Processing data...</p>;\n  }\n\n  return (\n    <div className=\"WeeklyProgress\">\n      <h1 style={{\n        margin: \"4px 0 25px 0\",\n        padding: \"0\",\n        fontSize: \"28px\",\n        fontWeight: \"600\"\n      }}>\n        Weekly Progress\n      </h1>\n      <div className=\"time-range-button-container\">\n        {TIME_RANGES.map((timeRange, index) => {\n          let buttonClassName = \"button time-range-button\";\n          if (selectedTimeRangeKey === timeRange.key) {\n            buttonClassName += \" selected\";\n          }\n          return (\n            <button\n              key={index}\n              className={buttonClassName}\n              onClick={() => setSearchParams({timeRange: timeRange.key})}\n            >\n              {timeRange.name}\n            </button>\n          );\n        })}\n      </div>\n      <div style={{display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\"}}>\n        {progressByTimeRangeKey[selectedTimeRangeKey].map((progressReport, index) => {\n          return <ProgressRing\n            key={index}\n            stroke={8}\n            radius={windowDimensions.width > 419 ? 85 : 75}\n            progress={progressReport[\"progress\"]}\n            title={progressReport[\"title\"]}\n            progressText={progressReport[\"progressText\"]}\n          />;\n        })}\n      </div>\n    </div>\n  );\n}\n","/** the getter on react-dom's `useSearchParams` hook doesn't work with the hash\n * router, so use this function instead to read search params from the URL\n*/\nexport const getSearchParams = () => {\n  const cleanLocationString = window.location\n    .toString()\n    .replace(\"/#/\", \"/\")\n    .replace(`${window.location.pathname}#/`, `${window.location.pathname}/`);\n  return new URL(cleanLocationString).searchParams;\n};\n"],"names":["ProgressRing","_ref","radius","stroke","progress","title","_ref$progressText","progressText","adjustedProgress","normalizedRadius","circumference","Math","PI","strokeDashoffset","showFullCircle","_jsxs","className","style","maxWidth","maxHeight","children","_jsx","height","width","fill","strokeWidth","strokeDasharray","r","cx","cy","concat","titleCase","string","splitStringArray","toLowerCase","split","i","length","charAt","toUpperCase","slice","join","TIME_RANGES","name","key","WeeklyProgress","_useContext","useContext","AggregatedImmersionContext","data","aggregatedImmersionData","isLoading","aggregatedImmersionIsLoading","_useState","useState","window","innerHeight","innerWidth","_useState2","_slicedToArray","windowDimensions","setWindowDimensions","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","selectedTimeRangeKey","useMemo","_getSearchParams$get","urlTimeRange","getSearchParams","get","trim","map","t","includes","parsedCsvData","useParsedCsv","progressByTimeRangeKey","result","forEach","timeRange","progressReport","parseInt","useEffect","handleResize","addEventListener","removeEventListener","Object","keys","margin","padding","fontSize","fontWeight","index","buttonClassName","onClick","display","flexWrap","justifyContent","cleanLocationString","location","toString","replace","pathname","URL"],"sourceRoot":""}