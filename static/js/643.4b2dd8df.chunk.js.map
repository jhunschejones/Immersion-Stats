{"version":3,"file":"static/js/643.4b2dd8df.chunk.js","mappings":"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","sources":["utils/date.js","hooks/use-dataset-index-from-hot-keys.js","components/StudyTrendsPage.js","utils/urls.js"],"sourcesContent":["/**\n * Build an array of all dates between two dates\n *\n * @param {Date} startDate - the start of the date range\n * @param {Date} endDate - the end of the date range\n * @returns {array<Date>}\n */\nexport const getDatesBetween = (startDate, endDate) => {\n  const currentDate = new Date(startDate.getTime());\n  const dates = [];\n  while (currentDate <= endDate) {\n    dates.push(new Date(currentDate));\n    currentDate.setDate(currentDate.getDate() + 1);\n  }\n  return dates;\n};\n\nexport const tenDaysAgo = new Date(new Date().setDate(new Date().getDate() - 10));\nexport const oneMonthAgo = new Date(new Date().setMonth(new Date().getMonth() - 1));\nexport const threeMonthsAgo = new Date(new Date().setMonth(new Date().getMonth() - 3));\nexport const oneYearAgo = new Date(new Date().setFullYear(new Date().getFullYear() - 1));\nexport const twoYearsAgo = new Date(new Date().setFullYear(new Date().getFullYear() - 2));\nexport const threeYearsAgo = new Date(new Date().setFullYear(new Date().getFullYear() - 3));\n\nexport const tenDaysDateRange = getDatesBetween(tenDaysAgo, new Date());\nexport const oneMonthDateRange = getDatesBetween(oneMonthAgo, new Date());\nexport const threeMonthsDateRange = getDatesBetween(threeMonthsAgo, new Date());\nexport const oneYearDateRange = getDatesBetween(oneYearAgo, new Date());\nexport const twoYearsDateRange = getDatesBetween(twoYearsAgo, new Date());\nexport const threeYearsDateRange = getDatesBetween(threeYearsAgo, new Date());\n","import { useState } from \"react\";\nimport { useHotkeys } from \"react-hotkeys-hook\";\n\nconst useDatasetIndexFromHotKeys = () => {\n  const [datasetIndex, setDatasetIndex] = useState(undefined);\n\n  // press `1` to show the average for the dataset at index `0`, the `jpdb.io` dataset\n  useHotkeys(\"1\", () => setDatasetIndex(s => s == 0 ? undefined : 0), []);\n  // press `1` to show the average for the dataset at index `1`, the `Bunpro` dataset\n  useHotkeys(\"2\", () => setDatasetIndex(s => s == 1 ? undefined : 1), []);\n  // press `1` to show the average for the dataset at index `2`, the `Anki` dataset\n  useHotkeys(\"3\", () => setDatasetIndex(s => s == 2 ? undefined : 2), []);\n  // press `1` to show the average for the dataset at index `3`, the `Immersion` dataset\n  useHotkeys(\"4\", () => setDatasetIndex(s => s == 3 ? undefined : 3), []);\n  // press `5` to show the average for the dataset at index `4`, the `totals` dataset\n  useHotkeys(\"5\", () => setDatasetIndex(s => s == 4 ? undefined : 4), []);\n  // press `backspace` to remove any average lines being shown\n  useHotkeys(\"backspace\", () => setDatasetIndex(undefined), []);\n\n  return { datasetIndex };\n};\n\nexport default useDatasetIndexFromHotKeys;\n","import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from \"chart.js\";\nimport annotationPlugin from \"chartjs-plugin-annotation\";\nimport { Line } from \"react-chartjs-2\";\n\nimport { useContext, useMemo } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { getSearchParams } from \"../utils/urls\";\nimport { parseCsvFile } from \"../utils/parsing\";\nimport { oneMonthDateRange, threeMonthsDateRange, oneYearDateRange, tenDaysDateRange, twoYearsDateRange, threeYearsDateRange } from \"../utils/date\";\nimport { JpdbContext } from \"../providers/JpdbProvider\";\nimport { BunproContenxt } from \"../providers/BunproProvider\";\nimport { AnkiContext } from \"../providers/AnkiProvider\";\nimport { ImmersionContext } from \"../providers/ImmersionProvider\";\nimport useDatasetIndexFromHotKeys from \"../hooks/use-dataset-index-from-hot-keys\";\n\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend, annotationPlugin);\n\n\nconst DATE_RANGES = [\"10D\", \"1M\", \"3M\", \"1Y\", \"2Y\", \"3Y\"];\nconst HIDDEN_DATE_RANGES = [\"2Y\", \"3Y\"];\nconst DATE_RANGES_TO_SHOW = DATE_RANGES.filter((dateRange) => !HIDDEN_DATE_RANGES.includes(dateRange));\n\nconst datesForDateRangeString = (dateRange) => {\n  if (dateRange == \"1M\") {\n    return oneMonthDateRange;\n  }\n  if (dateRange == \"3M\") {\n    return threeMonthsDateRange;\n  }\n  if (dateRange == \"1Y\") {\n    return oneYearDateRange;\n  }\n  if (dateRange == \"2Y\") {\n    return twoYearsDateRange;\n  }\n  if (dateRange == \"3Y\") {\n    return threeYearsDateRange;\n  }\n  // default date range is 10D\n  return tenDaysDateRange;\n};\n\nconst chartLablesByDateRange = {};\nDATE_RANGES.forEach((dateRange) => {\n  chartLablesByDateRange[dateRange] = datesForDateRangeString(dateRange).map(d => d.toLocaleDateString(\"en-US\", { month: \"numeric\", day: \"numeric\", weekday: \"short\" }));\n});\n\n\n/**\n * A helper method to transform a `dataset` or several datasets into an array of chart data for a given `dateRange`,\n * filling in `0`s for missing days.\n *\n * @param {{} | []} dataset - a single dataset or an array of datasets\n * @param {string | array<Date>} dateRange\n * @returns {array<{ \"Date\": string, \"Time (mins)\": string }>}\n */\nexport const datasetToPaddedArray = (dataset, dateRange) => {\n  const datasetArray = Array(dataset).flat(); // support a single dataset or an array of datasets\n  const range = (typeof dateRange == \"string\") ? datesForDateRangeString(dateRange) : dateRange;\n\n  return range.map((date) => {\n    const dateKey = date.toISOString().split(\"T\")[0];\n    const matchingDataEntries = datasetArray.map((d) => d[dateKey]).filter((d) => d != undefined);\n    if (matchingDataEntries.length > 0) {\n      return { date: date, minutesStudied: matchingDataEntries.map((d) => d.minutesStudied).reduce((a, b) => a + b, 0) };\n    }\n    return { date: date, minutesStudied: 0 };\n  });\n};\n\n/**\n * Parses a CSV with at least `Date` and `Time (mins)` columns into a standardized dataset object, summing\n * `Time (mins)` for duplicate entries.\n *\n * @param {array<{ \"Date\": string, \"Time (mins)\": string }>} csvData\n * @returns {{string: {date: Date, minutesStudied: number}}} - data set keyed by date string\n */\nexport const standardizedCsvToDataset = (csvData) => {\n  const result = {};\n  parseCsvFile(csvData).forEach((d) => {\n    const date = new Date(d[\"Date\"]);\n    const dateStringKey = date.toISOString().split(\"T\")[0];\n    if (result[dateStringKey]) {\n      const previousMinutesStudied = result[dateStringKey].minutesStudied;\n      result[dateStringKey] = { date: date, minutesStudied: parseFloat(d[\"Time (mins)\"]) + previousMinutesStudied };\n    } else {\n      result[dateStringKey] = { date: date, minutesStudied: parseFloat(d[\"Time (mins)\"]) };\n    }\n  });\n  return result;\n};\n\n// charts.js helper method to parse the chart `ctx` object and return an average value for the given dataset `index`\nconst avgFromChartCtx = (chartCtx, index) => {\n  if (!chartCtx) return undefined;\n  try {\n    const values = chartCtx.chart.data.datasets.at(index).data;\n    return values.reduce((a, b) => a + b, 0) / values.length;\n  } catch (error) {\n    return undefined;\n  }\n};\n\nconst defaultChartOptions = {\n  responsive: true,\n  maintainAspectRatio: false,\n  plugins: {\n    legend: {\n      position: \"top\",\n    },\n    annotation: {\n      animation: false,\n      annotations: {\n        averageTotal: {\n          display: false\n        }\n      }\n    }\n  },\n  scales: {\n    y: {\n      title: {\n        display: true,\n        text: \"Study minutes\"\n      }\n    }\n  }\n};\n\nconst chartOptionsWithAverageAnnotation = (index) => {\n  return {\n    ...defaultChartOptions,\n    plugins: {\n      ...defaultChartOptions.plugins,\n      annotation: {\n        ...defaultChartOptions.plugins.annotation,\n        annotations: {\n          ...defaultChartOptions.plugins.annotation.annotations,\n          averageTotal: {\n            type: \"line\",\n            scaleID: \"y\",\n            value: (ctx) => avgFromChartCtx(ctx, index) ?? 0,\n            display: (ctx) => !ctx.chart.legend.legendItems.at(index).hidden,\n            label: {\n              display: true,\n              content: (ctx) => `Avg: ${avgFromChartCtx(ctx, index)?.toFixed(0)} mins/day`,\n              backgroundColor: (ctx) => ctx.chart.data.datasets.at(index).borderColor,\n              color: (ctx) => {\n                // show gray text for gray background\n                if (ctx.chart.data.datasets.at(index).borderColor == \"#e5e5e5\") {\n                  return \"#777\";\n                }\n                // show white text for all other backgrounds\n                return \"#FFF\";\n              },\n              backgroundShadowColor: \"#b7b7b7\",\n              shadowOffsetX: 3,\n              shadowOffsetY: 3,\n              shadowBlur: 4,\n            },\n            borderColor: (ctx) => ctx.chart.data.datasets.at(index).borderColor,\n            borderDash: [6, 6],\n            borderWidth: 3,\n            drawTime: \"afterDraw\",\n            shadowOffsetX: 3,\n            shadowOffsetY: 3,\n            shadowBlur: 4,\n            borderShadowColor: \"#b7b7b7\",\n          }\n        }\n      }\n    }\n  };\n};\n\n\nexport default function StudyTrendsPage () {\n  const {jpdbData, jpdbIsLoading} = useContext(JpdbContext);\n  const {bunproData, bunproIsLoading} = useContext(BunproContenxt);\n  const {ankiData, ankiDataIsLoading} = useContext(AnkiContext);\n  const {immersionData, immersionIsLoading} = useContext(ImmersionContext);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const selectedDateRange = useMemo(() => {\n    const urlDateRange = getSearchParams().get(\"dateRange\")?.trim();\n    if (urlDateRange && DATE_RANGES.includes(urlDateRange)) return urlDateRange;\n    return DATE_RANGES[0];\n  }, [searchParams]);\n\n  const { datasetIndex: datasetIndexToShowAverageFor } = useDatasetIndexFromHotKeys();\n  const chartOptions = useMemo(() => {\n    if (datasetIndexToShowAverageFor == undefined) return defaultChartOptions;\n    return chartOptionsWithAverageAnnotation(datasetIndexToShowAverageFor);\n  }, [datasetIndexToShowAverageFor]);\n\n  const dataSetsBySource = useMemo(() => {\n    if (jpdbIsLoading || bunproIsLoading || ankiDataIsLoading || immersionIsLoading) return {};\n    if ([jpdbData, bunproData, ankiData, immersionData].includes(undefined)) return {};\n    return {\n      jpdb: standardizedCsvToDataset(jpdbData),\n      bunpro: standardizedCsvToDataset(bunproData),\n      anki: standardizedCsvToDataset(ankiData),\n      immersion: standardizedCsvToDataset(immersionData)\n    };\n  }, [jpdbIsLoading, jpdbData, bunproIsLoading, bunproData, ankiDataIsLoading, ankiData, immersionIsLoading, immersionData]);\n\n  const chartData = useMemo(() => {\n    if (Object.keys(dataSetsBySource).length == 0) return {};\n    return {\n      labels: chartLablesByDateRange[selectedDateRange],\n      datasets: [\n        {\n          label: \"jpdb.io\",\n          data: datasetToPaddedArray(dataSetsBySource.jpdb, selectedDateRange).map(d => d.minutesStudied),\n          borderColor: \"#5dcc06\",\n          backgroundColor: \"#5dcc06\",\n        },\n        {\n          label: \"Bunpro\",\n          data: datasetToPaddedArray(dataSetsBySource.bunpro, selectedDateRange).map(d => d.minutesStudied),\n          borderColor: \"#ff9600\",\n          backgroundColor: \"#ff9600\",\n        },\n        {\n          label: \"Anki\",\n          data: datasetToPaddedArray(dataSetsBySource.anki, selectedDateRange).map(d => d.minutesStudied),\n          borderColor: \"#235390\",\n          backgroundColor: \"#235390\",\n        },\n        {\n          label: \"Immersion\",\n          data: datasetToPaddedArray(dataSetsBySource.immersion, selectedDateRange).map(d => d.minutesStudied),\n          borderColor: \"#cc348d\",\n          backgroundColor: \"#cc348d\",\n        },\n        {\n          label: \"Total\",\n          data: datasetToPaddedArray(\n            [dataSetsBySource.jpdb, dataSetsBySource.bunpro, dataSetsBySource.anki, dataSetsBySource.immersion],\n            selectedDateRange\n          ).map(d => d.minutesStudied),\n          borderColor: \"#e5e5e5\",\n          backgroundColor: \"#e5e5e5\",\n        }\n      ],\n    };\n  }, [dataSetsBySource, selectedDateRange]);\n\n  return(\n    <div style={{maxHeight: \"calc(100vh - 220px)\", padding: \"0 12px 12px 12px\", display: \"flex\", flexDirection: \"column\", alignItems: \"center\"}}>\n      <h1 style={{margin: \"4px 0 18px 0\", padding: \"0\", fontSize: \"28px\", fontWeight: \"600\"}}>\n        Study Trends\n      </h1>\n      <div style={{display: \"flex\", marginBottom: \"12px\"}}>\n        {DATE_RANGES_TO_SHOW.map((dateRange, index) => {\n          const buttonStyles = { backgroundColor: \"#1baff6\", borderColor: \"#1a99d6\", margin: \"0 2px\", padding: \"5px 10px 3px 10px\" };\n          if (selectedDateRange === dateRange) {\n            buttonStyles.backgroundColor = \"#ce82ff\";\n            buttonStyles.borderColor = \"#a567cc\";\n          }\n          return (\n            <button key={index} className=\"button\" style={buttonStyles} onClick={() => setSearchParams({dateRange: dateRange})}>\n              {dateRange}\n            </button>\n          );\n        })}\n      </div>\n      {\n        !chartData?.datasets ?\n          <p style={{textAlign: \"center\"}}>Loading...</p> :\n          <Line options={chartOptions} data={chartData} />\n      }\n    </div>\n  );\n}\n","/** the getter on react-dom's `useSearchParams` hook doesn't work with the hash\n * router, so use this function instead to read search params from the URL\n*/\nexport const getSearchParams = () => {\n  const cleanLocationString = window.location\n    .toString()\n    .replace(\"/#/\", \"/\")\n    .replace(`${window.location.pathname}#/`, `${window.location.pathname}/`);\n  return new URL(cleanLocationString).searchParams;\n};\n"],"names":["getDatesBetween","startDate","endDate","currentDate","Date","getTime","dates","push","setDate","getDate","tenDaysAgo","oneMonthAgo","setMonth","getMonth","threeMonthsAgo","oneYearAgo","setFullYear","getFullYear","twoYearsAgo","threeYearsAgo","tenDaysDateRange","oneMonthDateRange","threeMonthsDateRange","oneYearDateRange","twoYearsDateRange","threeYearsDateRange","_useState","useState","undefined","_useState2","_slicedToArray","datasetIndex","setDatasetIndex","useHotkeys","s","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Tooltip","Legend","annotationPlugin","DATE_RANGES","HIDDEN_DATE_RANGES","DATE_RANGES_TO_SHOW","filter","dateRange","includes","datesForDateRangeString","chartLablesByDateRange","forEach","map","d","toLocaleDateString","month","day","weekday","datasetToPaddedArray","dataset","datasetArray","Array","flat","date","dateKey","toISOString","split","matchingDataEntries","length","minutesStudied","reduce","a","b","standardizedCsvToDataset","csvData","result","parseCsvFile","dateStringKey","previousMinutesStudied","parseFloat","avgFromChartCtx","chartCtx","index","values","chart","data","datasets","at","error","defaultChartOptions","responsive","maintainAspectRatio","plugins","legend","position","annotation","animation","annotations","averageTotal","display","scales","y","title","text","chartOptionsWithAverageAnnotation","_objectSpread","type","scaleID","value","ctx","_avgFromChartCtx","legendItems","hidden","label","content","_avgFromChartCtx2","concat","toFixed","backgroundColor","borderColor","color","backgroundShadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","borderDash","borderWidth","drawTime","borderShadowColor","StudyTrendsPage","_useContext","useContext","JpdbContext","jpdbData","jpdbIsLoading","_useContext2","BunproContenxt","bunproData","bunproIsLoading","_useContext3","AnkiContext","ankiData","ankiDataIsLoading","_useContext4","ImmersionContext","immersionData","immersionIsLoading","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","selectedDateRange","useMemo","_getSearchParams$get","urlDateRange","getSearchParams","get","trim","datasetIndexToShowAverageFor","useDatasetIndexFromHotKeys","chartOptions","dataSetsBySource","jpdb","bunpro","anki","immersion","chartData","Object","keys","labels","_jsxs","style","maxHeight","padding","flexDirection","alignItems","children","_jsx","margin","fontSize","fontWeight","marginBottom","buttonStyles","className","onClick","Line","options","textAlign","cleanLocationString","window","location","toString","replace","pathname","URL"],"sourceRoot":""}