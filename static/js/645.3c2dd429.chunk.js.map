{"version":3,"file":"static/js/645.3c2dd429.chunk.js","mappings":"qMAKO,MAAMA,EAAMA,CAACC,EAAMC,IACjBD,EAAKE,QAAO,CAACC,EAAIC,IAAOD,GAAMA,EAAGC,GAAMD,EAAGC,GAAK,MAAMH,G,aCC/C,SAASI,IACtB,MAAM,KAACC,EAAI,UAAEC,IAAaC,EAAAA,EAAAA,UAAS,CAAEC,SAAU,CAAC,aAAcC,QAASC,EAAAA,KAEjEC,GAAgBC,EAAAA,EAAAA,GAAaN,EAAWD,GACxCQ,GAAgBC,EAAAA,EAAAA,UAAQ,IAAMH,EAAcI,MAAK,CAACC,EAAGC,IAAM,IAAIC,KAAKD,EAAQ,MAAK,IAAIC,KAAKF,EAAQ,SAAK,CAACL,IAExGQ,GAAYL,EAAAA,EAAAA,UAAQ,IAAMhB,EAAI,CAAC,QAASe,EAAcA,EAAcO,OAAS,KAAK,CAACP,IACnFQ,GAAUP,EAAAA,EAAAA,UAAQ,IAAMhB,EAAI,CAAC,QAASe,EAAc,KAAK,CAACA,IAE1DS,GAAmBR,EAAAA,EAAAA,UAAQ,KAC/B,MAAMS,EAAaC,MAAMC,KAAK,IAAIC,IAAIb,EAAcc,KAAKC,GAAQA,EAAc,aACzEN,EAAmB,CAAC,EAS1B,OARAC,EAAWM,SAASC,IAClB,MAAMC,EAAYlB,EACfmB,QAAQJ,GAAQA,EAAc,WAAME,IACpCH,KAAKC,GAAQK,SAASL,EAAI,kBAC1BI,QAAQJ,IAASM,MAAMN,KACvB3B,QAAO,CAACe,EAAGC,IAAMD,EAAIC,GAAG,GAC3BK,EAAiBQ,GAAYC,CAAS,IAEjCT,CAAgB,GACtB,CAACT,IAGJ,OAAIP,GACK6B,EAAAA,EAAAA,KAAA,KAAGC,UAAU,mBAAkBC,SAAC,yBAGI,IAAzCC,OAAOC,KAAKjB,GAAkBF,QACzBe,EAAAA,EAAAA,KAAA,KAAGC,UAAU,mBAAkBC,SAAC,wBAIvCG,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,MAAIM,MAAO,CACTC,OAAQ,cACRC,QAAS,IACTC,SAAU,OACVC,WAAY,OACZR,SAAC,0BAGHG,EAAAA,EAAAA,MAAA,KAAGC,MAAO,CAACC,OAAQ,IAAKG,WAAY,MAAOD,SAAU,QAAQP,SAAA,CAC1DlB,EAAU,MAAIE,MAEjBc,EAAAA,EAAAA,KAAA,MAAIC,UAAU,gBAAeC,SAC1BC,OAAOQ,QAAQxB,GACbP,MAAK,CAACC,EAAGC,IAAMA,EAAE,GAAKD,EAAE,KACxBW,KAAI,CAAAoB,EAAoBC,KAAO,IAAzBlB,EAAUmB,GAAMF,EACrB,OACEP,EAAAA,EAAAA,MAAA,MAAYJ,UAAU,WAAUC,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,gBAAeC,SAAEP,KACjCK,EAAAA,EAAAA,KAAA,QAAMC,UAAU,gBAAeC,UAAEa,EAAAA,EAAAA,GAA+BD,OAFzDD,EAGJ,QAMnB,C","sources":["utils/objects.js","components/ActivityTotals.js"],"sourcesContent":["/**\n * retrieves nested values from an object\n * @param {array} path - an array of strings specifying the path\n * @param {object} object - the object to retrieve the data from\n */\nexport const dig = (path, object) => {\n  return path.reduce((xs, x) => (xs && xs[x]) ? xs[x] : null, object);\n};\n","import { useMemo } from \"react\";\nimport { useQuery } from \"react-query\";\nimport useParsedCsv from \"../hooks/use-parsed-csv\";\nimport { minutesToHoursAndMinutesString } from \"../utils/time\";\nimport { fetchImmersion } from \"../utils/csv-fetching\";\nimport { dig } from \"../utils/objects\";\n\nexport default function ActivityTotals () {\n  const {data, isLoading} = useQuery({ queryKey: [\"immersion\"], queryFn: fetchImmersion });\n\n  const parsedCsvData = useParsedCsv(isLoading, data);\n  const sortedCsvData = useMemo(() => parsedCsvData.sort((a, b) => new Date(b[\"Date\"]) - new Date(a[\"Date\"])), [parsedCsvData]);\n\n  const startDate = useMemo(() => dig([\"Date\"], sortedCsvData[sortedCsvData.length - 1]), [sortedCsvData]);\n  const endDate = useMemo(() => dig([\"Date\"], sortedCsvData[0]), [sortedCsvData]);\n\n  const totalsByActivity = useMemo(() => {\n    const activities = Array.from(new Set(sortedCsvData.map((row) => row[\"Activity\"])));\n    const totalsByActivity = {};\n    activities.forEach((activity) => {\n      const totalTime = sortedCsvData\n        .filter((row) => row[\"Activity\"] === activity)\n        .map((row) => parseInt(row[\"Time (mins)\"]))\n        .filter((row) => !isNaN(row))\n        .reduce((a, b) => a + b, 0);\n      totalsByActivity[activity] = totalTime;\n    });\n    return totalsByActivity;\n  }, [sortedCsvData]);\n\n\n  if (isLoading) {\n    return <p className=\"loading-messsage\">Fetching csv file...</p>;\n  }\n\n  if (Object.keys(totalsByActivity).length === 0) {\n    return <p className=\"loading-messsage\">Processing data...</p>;\n  }\n\n  return (\n    <div className=\"ActivityTotals\">\n      <h1 style={{\n        margin: \"4px 0 2px 0\",\n        padding: \"0\",\n        fontSize: \"28px\",\n        fontWeight: \"600\"\n      }}>\n        Immersion Activities\n      </h1>\n      <p style={{margin: \"0\", fontWeight: \"200\", fontSize: \"14px\"}}>\n        {startDate} - {endDate}\n      </p>\n      <ul className=\"activity-list\">\n        {Object.entries(totalsByActivity)\n          .sort((a, b) => b[1] - a[1])\n          .map(([activity, total], i) => {\n            return (\n              <li key={i} className=\"activity\">\n                <span className=\"activity-name\">{activity}</span>\n                <span className=\"activity-time\">{minutesToHoursAndMinutesString(total)}</span>\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n}\n"],"names":["dig","path","object","reduce","xs","x","ActivityTotals","data","isLoading","useQuery","queryKey","queryFn","fetchImmersion","parsedCsvData","useParsedCsv","sortedCsvData","useMemo","sort","a","b","Date","startDate","length","endDate","totalsByActivity","activities","Array","from","Set","map","row","forEach","activity","totalTime","filter","parseInt","isNaN","_jsx","className","children","Object","keys","_jsxs","style","margin","padding","fontSize","fontWeight","entries","_ref","i","total","minutesToHoursAndMinutesString"],"sourceRoot":""}